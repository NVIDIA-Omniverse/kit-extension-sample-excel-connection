mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using OmniUe4Function import *;
using OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material MI_Barcode_0001(
	uniform texture_2d BaseColor_Texture = texture_2d("./Textures/0001.png",::tex::gamma_srgb)
	[[sampler_color()]],
	float4 BaseColor_Tint = float4(1.0,1.0,1.0,1.0),
	float Metallic = 0.05,
	float Roughness = 0.3)
[[
	dither_masked_off()
]]
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);


	float3 Normal_mdl = float3(0.0,0.0,1.0);

	float4 Local0 = tex::lookup_float4(BaseColor_Texture,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local1 = (float3(Local0.x,Local0.y,Local0.z) * float3(BaseColor_Tint.x,BaseColor_Tint.y,BaseColor_Tint.z));

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = (Local0.w - 0.3333) < 0.0f ? 0.0f : 1.0f;
	float3 BaseColor_mdl = Local1;
	float Metallic_mdl = Metallic;
	float Specular_mdl = 0.5;
	float Roughness_mdl = Roughness;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
