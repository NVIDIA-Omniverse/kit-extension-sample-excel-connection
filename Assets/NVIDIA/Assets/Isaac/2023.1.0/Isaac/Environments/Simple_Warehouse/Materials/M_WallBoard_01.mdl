mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using OmniUe4Function import *;
using OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material M_WallBoard_01(
	uniform texture_2d MainNormalInput = texture_2d("./Textures/T_WallBoard_01_N.png",::tex::gamma_linear)
	[[sampler_normal()]],
	uniform texture_2d AlbedoTexture = texture_2d("./Textures/T_WallBoard_01_D.png",::tex::gamma_srgb)
	[[sampler_color()]],
	uniform texture_2d MergeMapInput = texture_2d("./Textures/T_WallBoard_01_ORM.png",::tex::gamma_linear)
	[[sampler_color()]],
	float RoughnessMin = 0.1,
	float RoughnessMax = 0.9,
	uniform texture_2d AlphaSelection = texture_2d("./Textures/T_WallBoard_01_M.png",::tex::gamma_linear)
	[[sampler_alpha()]])
[[
	dither_masked_off()
]]
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);

	float4 Local0 = ::unpack_normal_map(tex::lookup_float4(MainNormalInput,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat));

	float3 Normal_mdl = float3(Local0.x,Local0.y,Local0.z);

	float4 Local1 = tex::lookup_float4(AlbedoTexture,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float4 Local2 = tex::lookup_float4(MergeMapInput,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local3 = math::lerp(RoughnessMin,RoughnessMax,float3(Local2.x,Local2.y,Local2.z).y);
	float4 Local4 = ::greyscale_texture_lookup(tex::lookup_float4(AlphaSelection,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat));

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = (float3(Local4.x,Local4.y,Local4.z).x - 0.3333) < 0.0f ? 0.0f : 1.0f;
	float3 BaseColor_mdl = float3(Local1.x,Local1.y,Local1.z);
	float Metallic_mdl = float3(Local2.x,Local2.y,Local2.z).z;
	float Specular_mdl = 0.5;
	float Roughness_mdl = Local3;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: true);
