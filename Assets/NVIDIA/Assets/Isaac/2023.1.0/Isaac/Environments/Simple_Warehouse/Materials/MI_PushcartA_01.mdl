mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using OmniUe4Function import *;
using OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material MI_PushcartA_01(
	uniform texture_2d MainNormalInput = texture_2d("./Textures/T_BarelPlasticA_N.png",::tex::gamma_linear)
	[[sampler_normal()]],
	float4 Body = float4(0.128,0.128,0.128,1.0),
	uniform texture_2d MaskSelection = texture_2d("./Textures/T_BarelPlasticA_M.png",::tex::gamma_linear)
	[[sampler_color()]],
	float4 Handle = float4(0.128,0.128,0.128,1.0),
	float4 Cap = float4(0.128,0.128,0.128,1.0),
	uniform texture_2d AlbedoTexture = texture_2d("./Textures/T_BarelPlasticA_D.png",::tex::gamma_srgb)
	[[sampler_color()]],
	uniform texture_2d MergeMapInput = texture_2d("./Textures/T_BarelPlasticA_ORM.png",::tex::gamma_linear)
	[[sampler_color()]],
	float RoughnessMin = 0.1,
	float RoughnessMax = 0.9)
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);

	float4 Local0 = ::unpack_normal_map(tex::lookup_float4(MainNormalInput,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat));

	float3 Normal_mdl = float3(Local0.x,Local0.y,Local0.z);

	float4 Local1 = tex::lookup_float4(MaskSelection,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local2 = math::lerp(float3(0.0,0.0,0.0),float3(Body.x,Body.y,Body.z),Local1.x);
	float3 Local3 = math::lerp(Local2,float3(Handle.x,Handle.y,Handle.z),Local1.y);
	float3 Local4 = math::lerp(Local3,float3(Cap.x,Cap.y,Cap.z),Local1.z);
	float4 Local5 = tex::lookup_float4(AlbedoTexture,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local6 = math::lerp(Local4,float3(Local5.x,Local5.y,Local5.z),Local1.w);
	float4 Local7 = tex::lookup_float4(MergeMapInput,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local8 = math::lerp(RoughnessMin,RoughnessMax,float3(Local7.x,Local7.y,Local7.z).y);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local6;
	float Metallic_mdl = float3(Local7.x,Local7.y,Local7.z).z;
	float Specular_mdl = 0.5;
	float Roughness_mdl = Local8;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
